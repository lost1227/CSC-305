1. OthelloBoard::mWeights initializer used parenthesis instead of curlybraces
    - (16, 0, 8, 8, 8, 8, 0, 16)
    + {16, 0, 8, 8, 8, 8, 0, 16}
2. OthelloBoard::mDirs repeated {1, -1} twice and missed {1, 1}
    -   {0, 1}, {-1, 1}, {-1, 0}, {-1, -1}, {0, -1}, {1, -1}, {1, 0}, {1, -1}
    +   {0, 1}, {-1, 1}, {-1, 0}, {-1, -1}, {0, -1}, {1, -1}, {1, 0}, {1, 1}
3. OthelloBoard::OthelloBoard() constructor was not initializing mPassCount()
    -OthelloBoard::OthelloBoard() : mNextMove(mBPiece), mWeight(0) {
    +OthelloBoard::OthelloBoard() : mNextMove(mBPiece), mWeight(0), mPassCount(0) {
4. OthelloBoard::OthelloBoard() constructor was off-by-one when placing the initial tiles
    -   mBoard[dim/2+1][dim/2+1] = mBoard[dim/2][dim/2] = mWPiece;
    -   mBoard[dim/2+1][dim/2] = mBoard[dim/2][dim/2+1] = mBPiece;
    +   mBoard[dim/2-1][dim/2-1] = mBoard[dim/2][dim/2] = mWPiece;
    +   mBoard[dim/2-1][dim/2] = mBoard[dim/2][dim/2-1] = mBPiece;
5. OthelloBoard::GetValue() was not initializing the total before performing a += operation
    + total = 0;
6. OthelloBoard::ApplyMove() was not checking that a run ended with one of the player's tiles
    - if (InBounds(row, col)) {
    + if (InBounds(row, col) && mBoard[row][col] == mNextMove) {
7. OthelloBoard::ApplyMove() was counting one too many tiles as flipped
    + if(row != om->mRow || col != om->mCol)
    +    row -= dir->rDelta, col -= dir->cDelta;
8. OthelloBoard::ApplyMove() was using incorrect boolean logic
    - row != om->mRow && col != om->mCol
    + row != om->mRow || col != om->mCol
9. OthelloBoard::ApplyMove() was incorrectly calculating the board value
    - mWeight += mNextMove * mWeights[row][col];
    + mWeight += mNextMove * mWeights[row][col] * 2;
10. OthelloBoard::UndoLastMove() was using the rDelta to calculate the column
    - col = baseCol + flipSet.dir->rDelta;
    + col = baseCol + flipSet.dir->cDelta;
11. OthelloBoard::UndoLastMove() wouldn't set who's turn it is
    + mNextMove = -mNextMove;
11. OthelloBoard::GetAllMoves() wouldn't get moves of length 1
    - && mBoard[testRow][testCol] == mNextMove && steps > 2)
    + && mBoard[testRow][testCol] == mNextMove && steps > 1) {
12. OthelloBoard::GetAllMoves() would return a pass move, even if the game is over
    + if(mPassCount == 2)
    +    return;
13. OthelloMove::operator new() wouldn't remove reused blocks from the free list
    + mFreeList.pop_back();
14. OthelloMove::OthelloMove() constructor would use the row to initialize the column
    - OthelloMove(char row = 0, char col = 0) : mRow(row), mCol(row) {}
    + OthelloMove(char row = 0, char col = 0) : mRow(row), mCol(col) {}
15. OthelloBoard::Read() OBOE when reading board: decrementer stopped at 1 instead of 0
    - for (col = dim-1; col > 0; col--) {
    + for (col = dim-1; col >= 0; col--) {
16. OthelloBoard::Read() was not reading in the size
    + is.read((char *)&size, sizeof(size));
17. OthelloBoard::Read() OBOE: checking the predecrement instead of the postdecrement
    - while (is && --size) {
    + while (is && size--) {
18. OthelloBoard::Write() not reversing byte order of read columns
    + rowBits = EndianXfer(rowBits);
19. OthelloBoard::Write() memory leak: not deleting the rules pointer
    + delete rls;
20. OthelloBoard::RecalcWeight() was not resetting the weight before recalculating it
    + mWeight = 0
21. OthelloBoard::GetOptions() 2D arrays are not pointer arrays
    You can't take a short ** to a short[][]
    -   short **mWeights = (short **)OthelloBoard::mWeights;
    -   rtn->cornerWgt = mWeights[0][0];
    -   rtn->sideWgt = mWeights[0][2];
    -   rtn->nearSideWgt = mWeights[1][1];
    -   rtn->innerWgt = mWeights[2][2];
    +   rtn->cornerWgt = OthelloBoard::mWeights[0][0];
    +   rtn->sideWgt = OthelloBoard::mWeights[0][2];
    +   rtn->nearSideWgt = OthelloBoard::mWeights[1][1];
    +   rtn->innerWgt = OthelloBoard::mWeights[2][2];
22. OthelloMove::Read() OBOE: checking the predecrement instead of the postdecrement
    -   while (--size) {
    +   while (size--) {
23. OthelloMove::operator= bad regex: not allowing space between number and comma
    - regex reOth(R"(^ *((Pass)|\[ *(\d+), *(\d+) *\]) *$)");
    + regex reOth(R"(^ *((Pass)|\[ *(\d+) *, *(\d+) *\]) *$)");
24. OthelloMove::operator= OBOE: InRange is non-inclusive of the upper bound,
    but dim+1 was passed the upper bound
    -         if (!InRange<short>(0, tRow, OthelloBoard::dim+1)
    -          || !InRange<short>(0, tCol, OthelloBoard::dim+1))
    +         if (!InRange<short>(0, tRow, OthelloBoard::dim)
    +          || !InRange<short>(0, tCol, OthelloBoard::dim))
25. OthelloBoard::SetOptions was marking side discs as edge discs
    -         if (row == 0 || col == 0 || row == dim-1 || col == dim-1)
    -            mWeights[row][col] = rules->sideWgt;
    -         else if (row == 1 || col == 1 || row == dim-2 || col == dim-2)
    -            mWeights[row][col] = rules->nearSideWgt;
    +         if (row == 1 || col == 1 || row == dim-2 || col == dim-2)
    +            mWeights[row][col] = rules->nearSideWgt;
    +         else if (row == 0 || col == 0 || row == dim-1 || col == dim-1)
    +            mWeights[row][col] = rules->sideWgt;